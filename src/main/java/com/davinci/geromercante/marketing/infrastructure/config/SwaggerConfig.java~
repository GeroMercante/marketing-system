package com.davinci.geromercante.marketing.infrastructure.config;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.servers.Server;
import org.springdoc.core.models.GroupedOpenApi;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class SwaggerConfig {

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("Marketing API")
                        .description("API de marketing desarrollada por Gerónimo Mercante para la materia Diseno de Sistemas | Prof: Lic. Matias Velasquez")
                        .version("v1.0.0")
                        .contact(new Contact()
                                .name("Gerónimo Mercante")
                                .email("contacto@ejemplo.com"))
                        .license(new License()
                                .name("Licencia MIT")
                                .url("https://www.ejemplo.com/licencia")))
                .addSecurityItem(new SecurityRequirement().addList("JWT"))
                .components(new Components()
                        .addSecuritySchemes("JWT", new SecurityScheme()
                                .name("JWT")
                                .type(SecurityScheme.Type.HTTP)
                                .scheme("bearer")
                                .bearerFormat("JWT")
                                .in(SecurityScheme.In.HEADER)
                                .description("Introduce el token JWT")))
                .addServersItem(new Server().url("/").description("Default Server URL"));
    }

    @Bean
    public GroupedOpenApi publicApi() {
        return GroupedOpenApi.builder()
                .group("marketing-public")
                .pathsToMatch("/**")
                .build();
    }
}